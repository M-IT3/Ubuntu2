cat << 'EOF' > server_optimization.patch
From: Server Optimization <admin@server>
Date: $(date +%Y-%m-%d)
Subject: Optimize Ubuntu server for large file uploads (6GB+) at 1GB/s

--- /etc/nginx/nginx.conf
+++ /etc/nginx/nginx.conf
@@ -1,5 +1,5 @@
 user www-data;
-worker_processes auto;
+worker_processes 8;
 pid /run/nginx.pid;
 include /etc/nginx/modules-enabled/*.conf;
 
@@ -33,15 +33,27 @@
 	# SSL Settings
 	ssl_protocols TLSv1.2 TLSv1.3;
 	ssl_prefer_server_ciphers off;
 
 	# Logging Settings
 	access_log /var/log/nginx/access.log;
 	error_log /var/log/nginx/error.log;
 
+	# File Upload Optimizations
+	client_max_body_size 10G;
+	client_body_timeout 300s;
+	client_header_timeout 300s;
+	keepalive_timeout 300s;
+	send_timeout 300s;
+	client_body_buffer_size 1M;
+	
+	# Buffer optimizations
+	output_buffers 4 256k;
+	postpone_output 1460;
+
 	# Gzip Settings
 	gzip on;
 
 	# Virtual Host Configs
 	include /etc/nginx/conf.d/*.conf;
 	include /etc/nginx/sites-enabled/*;
 }

--- /etc/nginx/sites-available/default
+++ /etc/nginx/sites-available/default
@@ -45,10 +45,18 @@
 		# First attempt to serve request as file, then
 		# as directory, then fall back to displaying a 404.
 		try_files $uri $uri/ =404;
 	}
 
+	# Large file upload location
+	location /upload {
+		client_max_body_size 10G;
+		client_body_in_file_only clean;
+		client_body_temp_path /tmp/nginx_upload 1 2;
+		proxy_pass http://backend;
+	}
+
 	# pass PHP scripts to FastCGI server
 	#
 	#location ~ \.php$ {
 	#	include snippets/fastcgi-php.conf;
 	#

--- /etc/security/limits.conf
+++ /etc/security/limits.conf
@@ -1,0 +1,5 @@
+# Increased limits for high-speed file uploads
+* soft nofile 65536
+* hard nofile 65536
+* soft nproc 65536
+* hard nproc 65536

--- /etc/sysctl.conf
+++ /etc/sysctl.conf
@@ -1,0 +1,25 @@
+# Network optimizations for high-speed transfers
+net.core.rmem_max = 134217728
+net.core.wmem_max = 134217728
+net.ipv4.tcp_rmem = 4096 65536 134217728
+net.ipv4.tcp_wmem = 4096 65536 134217728
+net.core.netdev_max_backlog = 300000
+net.core.somaxconn = 65535
+net.ipv4.tcp_no_metrics_save = 1
+net.ipv4.tcp_congestion_control = cubic
+net.ipv4.tcp_mtu_probing = 1
+net.ipv4.tcp_fastopen = 3
+net.ipv4.tcp_max_syn_backlog = 65535
+net.ipv4.tcp_max_tw_buckets = 1440000
+net.ipv4.tcp_tw_reuse = 1
+net.ipv4.tcp_fin_timeout = 10
+net.ipv4.tcp_slow_start_after_idle = 0
+net.ipv4.tcp_keepalive_time = 600
+net.ipv4.tcp_keepalive_probes = 5
+net.ipv4.tcp_keepalive_intvl = 15
+
+# Memory optimizations
+vm.swappiness = 10
+vm.dirty_ratio = 15
+vm.dirty_background_ratio = 5
+vm.vfs_cache_pressure = 50

--- /etc/systemd/system/upload-server.service
+++ /etc/systemd/system/upload-server.service
@@ -0,0 +1,15 @@
+[Unit]
+Description=High-speed Upload Server
+After=network.target
+
+[Service]
+Type=simple
+User=www-data
+Group=www-data
+WorkingDirectory=/var/www/uploads
+ExecStart=/usr/bin/python3 -m http.server 8080 --bind 0.0.0.0
+Restart=always
+LimitNOFILE=65536
+
+[Install]
+WantedBy=multi-user.target

--- /opt/setup-upload-directory.sh
+++ /opt/setup-upload-directory.sh
@@ -0,0 +1,17 @@
+#!/bin/bash
+
+# Create upload directory with proper permissions
+mkdir -p /var/www/uploads
+chown -R www-data:www-data /var/www/uploads
+chmod 755 /var/www/uploads
+
+# Create optimized temp directory for nginx
+mkdir -p /tmp/nginx_upload
+chown -R www-data:www-data /tmp/nginx_upload
+chmod 755 /tmp/nginx_upload
+
+# Enable the upload service
+systemctl daemon-reload
+systemctl enable upload-server
+
+echo "Upload directory setup complete"
EOF

# Create application script
cat << 'EOF' > apply_optimizations.sh
#!/bin/bash

echo "Applying server optimizations for high-speed file uploads..."

# Backup original files
cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup
cp /etc/security/limits.conf /etc/security/limits.conf.backup
cp /etc/sysctl.conf /etc/sysctl.conf.backup

# Apply the patch
patch -p1 -d / < server_optimization.patch

# Make setup script executable
chmod +x /opt/setup-upload-directory.sh

# Run setup script
/opt/setup-upload-directory.sh

# Apply sysctl settings
sysctl -p

# Install required packages
apt-get update
apt-get install -y nginx python3

# Configure PHP if needed (uncomment if using PHP)
# echo "upload_max_filesize = 10G" >> /etc/php/*/cli/php.ini
# echo "post_max_size = 10G" >> /etc/php/*/cli/php.ini
# echo "max_execution_time = 300" >> /etc/php/*/cli/php.ini

# Restart services
systemctl restart nginx
systemctl start upload-server

echo "Optimizations applied successfully!"
echo ""
echo "Next steps:"
echo "1. Configure your firewall to allow ports 80, 443, and 8080"
echo "2. Set up SSL certificates for secure transfers"
echo "3. Test upload speed with: curl -X POST -T largefile.dat http://yourserver/upload"
echo "4. Monitor performance with: htop, iotop, nethogs"
EOF

chmod +x apply_optimizations.sh

echo "Created server_optimization.patch and apply_optimizations.sh"
echo "Run ./apply_optimizations.sh to apply all optimizations"
